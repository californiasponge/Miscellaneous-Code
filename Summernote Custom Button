CUSTOM BUTTON I CREATED TO ADD AUDIO NODE TO THE UPLOADABLE CONTENT USING S3Uploader created by a colleague 

// Extends plugins for adding audio.
//  - plugin is external module for customizing.
var AudioDialog = (function () {
    $.extend($.summernote.plugins, {

        'audio': function (context) {
            const self = this;

            const ui = $.summernote.ui;
            const $note = context.layoutInfo.note;
            const $editor = context.layoutInfo.editor;
            const $editable = context.layoutInfo.editable;
            const $toolbar = context.layoutInfo.toolbar;
            const options = context.options;
            const lang = options.langInfo;

            // create audio button
            context.memo('button.audio', function () {

                return ui.button({
                    contents: '<i class="fa fa-volume-up"></i>',
                    tooltip: 'Audio',
                    click: function (evt) {
                        self.show();
                    }
                }).render();

            });

            // add audio input modal
            this.initialize = function () {
                const $container = options.dialogsInBody ? $(document.body) : $editor;

                const body =
                    
                    '<div class="form-group note-form-group note-group-select-from-files">' +
                    '<label class="note-form-label">' + lang.audio.selectFromFiles + '</label>' +

                    '<input class="note-audio-input note-form-control note-input" ' +
                    ' type="file" name="files" accept="audio/*" multiple="multiple" />' +
                    '<br/>'+
                    '<div class="form-group note-form-group row-fluid">' +
                    "<label class=\"note-form-label\">" + lang.audio.url + " <small class=\"text-muted\">" + lang.audio.sources + "</small></label>" +
                    '<input class="note-audio-url form-control note-form-control note-input" type="text" />' +
                    '</div>';

                const buttonClass = 'btn btn-primary note-btn note-btn-primary note-audio-btn';

                const footer = "<button type=\"submit\" href=\"#\" class=\"" + buttonClass + "\" disabled>" + lang.audio.insert + "</button>";

                this.$dialog = ui.dialog({
                    title: lang.audio.insert,
                    fade: options.dialogsFade,
                    body: body,
                    footer: footer
                }).render().appendTo($container);

            };

            this.destroy = function () {
                ui.hideDialog(this.$dialog);
                this.$dialog.remove();
            };

            this.bindEnterKey = function ($input, $btn) {
                $input.on('keypress', function (event) {
                    if (event.keyCode === 13) { // 13 is the keycode for return/enter
                        $btn.trigger('click');
                    }
                });
            };

            this.bindLabels = function () {
                self.$dialog.find('.form-control:first').focus().select();
                self.$dialog.find('label').on('click', function () {
                    $(this).parent().find('.form-control:first').focus();
                });
            };

            this.createAudioNode = function (files) {
                $audio = $('<audio controls>')
                    .attr('src', files)
                    .attr('preload', 'auto')

                $audio.addClass('note-audio-clip');
                return $audio[0];
            };

            this.show = function () {
                var text = context.invoke('editor.getSelectedText');
                context.invoke('editor.saveRange');

                self.showAudioDialog(text).then(function (files) {
                    // [workaround] hide dialog before restore range for IE range focus
                    ui.hideDialog(self.$dialog);
                    context.invoke('editor.restoreRange');

                    const dialogElem = self.$dialog[0];
                    const S3UploadService =
                        angular.element(dialogElem)
                            .injector()
                            .get('S3UploadService');

                    const formData = new FormData();
                    formData.append(this.description, files[0]);

                    return S3UploadService.upload(formData).then(
                        response => {
                            var files = response.data.item.url;
                            return files;
                        },
                        err => {
                            $.gritter.add({
                                title: 'Sorry, Could Not Upload File!',
                                text: ' Please try again',
                                sticky: true,
                                time: '',
                                class_name: 'my-sticky-class'
                            });
                        }
                    ).then(function (files) {
                            // build node
                            var $node = self.createAudioNode(files);
                            if ($node) {
                                // insert Audio node
                                context.invoke('editor.insertNode', $node);
                            }
                        })
                });
            };

            this.showAudioDialog = function (text) {

                return $.Deferred(function (deferred) {
                    const $audioInput = self.$dialog.find('.note-audio-input');
                    const $audioUrl = self.$dialog.find('.note-audio-url');
                    const $audioBtn = self.$dialog.find('.note-audio-btn');
                    ui.onDialogShown(self.$dialog, function () {
                        context.triggerEvent('dialog.shown');

                        $audioInput.replaceWith($audioInput.on('change', function (event) {
                            deferred.resolve(event.target.files || event.target.value);
                        }).val(''));
                        $audioUrl.val(text).on('input', function () {
                            ui.toggleBtn($audioBtn, $audioUrl.val());
                        });
                        $audioUrl.on('keyup paste', function () {
                            var url = $audioUrl.val();
                            ui.toggleBtn($audioBtn, url);
                        }).val('');
                        $audioBtn.click(function (event) {
                            event.preventDefault();
                            deferred.resolve($audioUrl.val());
                        });
                    });
                    ui.onDialogHidden(self.$dialog, function () {
                        $audioInput.off('change');
                        $audioUrl.off('keyup paste keypress');
                        $audioUrl.off('input');
                        $audioBtn.off('click');
                        if (deferred.state() === 'pending') {
                            deferred.reject();
                        }
                    });
                    ui.showDialog(self.$dialog);
                });
            };
            return AudioDialog;
        }
    })
})();
